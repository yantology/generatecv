{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"generatecv","text":"<p>Professional CV/Resume generator for Python.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Generate professional CVs from structured data</li> <li>Multiple output formats (PDF, etc.)</li> <li>Customizable templates</li> <li>Easy to use Python API</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>pip install generatecv\n</code></pre> <pre><code>import generatecv\n\n# Your CV generation code here\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Getting Started</li> <li>API Reference</li> <li>Examples</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome contributions to generatecv! This document provides guidelines for contributing to the project.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>uv package manager</li> </ul>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:</li> </ol> <pre><code>git clone https://github.com/yourusername/generatecv.git\ncd generatecv\n</code></pre> <ol> <li>Install dependencies using uv:</li> </ol> <pre><code>uv sync --dev\n</code></pre> <ol> <li>Create a virtual environment and activate it:</li> </ol> <pre><code>uv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#making-changes","title":"Making Changes","text":"<ol> <li>Create a new branch for your feature or bugfix:</li> </ol> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <ol> <li> <p>Make your changes following the coding standards below</p> </li> <li> <p>Write or update tests for your changes</p> </li> <li> <p>Run the test suite to ensure everything works:</p> </li> </ol> <pre><code>uv run pytest\n</code></pre> <ol> <li>Run code quality checks:</li> </ol> <pre><code>uv run ruff check .\nuv run ruff format .\nuv run pyright\n</code></pre>"},{"location":"contributing/#code-quality-standards","title":"Code Quality Standards","text":"<p>We maintain high code quality standards using several tools:</p>"},{"location":"contributing/#code-formatting","title":"Code Formatting","text":"<ul> <li>Ruff: For code formatting and import sorting</li> <li>Run <code>uv run ruff format .</code> to format your code</li> <li>Run <code>uv run ruff check .</code> to check for issues</li> </ul>"},{"location":"contributing/#type-checking","title":"Type Checking","text":"<ul> <li>Pyright: For static type checking</li> <li>Run <code>uv run pyright</code> to check types</li> <li>Add type hints to all new functions and classes</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<ul> <li>pytest: For running tests</li> <li>Aim for high test coverage (&gt;90%)</li> <li>Write unit tests for all new functionality</li> <li>Include integration tests where appropriate</li> </ul>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nuv run pytest\n\n# Run tests with coverage\nuv run pytest --cov=generatecv\n\n# Run specific test file\nuv run pytest tests/test_specific.py\n\n# Run tests in watch mode during development\nuv run pytest-watch\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Update documentation for any new features</li> <li>Use docstrings with Google style formatting</li> <li>Update the changelog for significant changes</li> <li>Build documentation locally to test:</li> </ul> <pre><code>uv run mkdocs serve\n</code></pre>"},{"location":"contributing/#contribution-guidelines","title":"Contribution Guidelines","text":""},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure your code passes all tests and quality checks</li> <li>Update documentation as needed</li> <li>Add entries to CHANGELOG.md for significant changes</li> <li>Create a pull request with:</li> <li>Clear title and description</li> <li>Reference any related issues</li> <li>Include screenshots for UI changes</li> <li>List any breaking changes</li> </ol>"},{"location":"contributing/#commit-message-convention","title":"Commit Message Convention","text":"<p>We follow conventional commit format:</p> <pre><code>type(scope): description\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation changes - <code>style</code>: Code style changes - <code>refactor</code>: Code refactoring - <code>test</code>: Test changes - <code>chore</code>: Build/tooling changes</p> <p>Examples: <pre><code>feat(templates): add new minimal template\nfix(pdf): resolve font rendering issue\ndocs(api): update CV class documentation\n</code></pre></p>"},{"location":"contributing/#code-style-guidelines","title":"Code Style Guidelines","text":""},{"location":"contributing/#python-code-style","title":"Python Code Style","text":"<ul> <li>Follow PEP 8 conventions</li> <li>Use meaningful variable and function names</li> <li>Keep functions small and focused</li> <li>Add docstrings to all public functions and classes</li> <li>Use type hints consistently</li> </ul>"},{"location":"contributing/#docstring-format","title":"Docstring Format","text":"<p>Use Google style docstrings:</p> <pre><code>def create_cv(data: dict, template: str = \"modern\") -&gt; CV:\n    \"\"\"Create a new CV instance.\n\n    Args:\n        data: Dictionary containing CV data\n        template: Template name to use (default: \"modern\")\n\n    Returns:\n        A new CV instance\n\n    Raises:\n        ValidationError: If data validation fails\n        TemplateError: If template is not found\n\n    Example:\n        &gt;&gt;&gt; cv = create_cv({\"personal\": {\"name\": \"John Doe\"}})\n        &gt;&gt;&gt; cv.save(\"cv.pdf\")\n    \"\"\"\n</code></pre>"},{"location":"contributing/#project-structure","title":"Project Structure","text":"<pre><code>generatecv/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 generatecv/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 core/           # Core CV functionality\n\u2502       \u251c\u2500\u2500 templates/      # CV templates\n\u2502       \u251c\u2500\u2500 exporters/      # Output format exporters\n\u2502       \u2514\u2500\u2500 utils/          # Utility functions\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 unit/              # Unit tests\n\u2502   \u251c\u2500\u2500 integration/       # Integration tests\n\u2502   \u2514\u2500\u2500 fixtures/          # Test data\n\u251c\u2500\u2500 docs/                  # Documentation\n\u251c\u2500\u2500 examples/              # Usage examples\n\u2514\u2500\u2500 scripts/               # Development scripts\n</code></pre>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#bug-reports","title":"Bug Reports","text":"<p>When filing a bug report, please include: - Python version and operating system - generatecv version - Minimal code example that reproduces the issue - Expected vs actual behavior - Error messages and stack traces</p>"},{"location":"contributing/#feature-requests","title":"Feature Requests","text":"<p>For feature requests, please: - Describe the feature and its use case - Explain why it would be valuable - Consider if it fits the project scope - Propose an implementation approach if possible</p>"},{"location":"contributing/#code-contributions","title":"Code Contributions","text":"<p>We welcome contributions in these areas: - Bug fixes - New CV templates - Output format support - Performance improvements - Documentation improvements - Test coverage improvements</p>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>Releases are managed by maintainers and follow semantic versioning: - Major version: Breaking changes - Minor version: New features (backward compatible) - Patch version: Bug fixes</p>"},{"location":"contributing/#community-guidelines","title":"Community Guidelines","text":""},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>We are committed to providing a welcoming and inclusive environment: - Be respectful and professional - Welcome newcomers and help them get started - Focus on constructive feedback - Respect different viewpoints and experiences</p>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Check existing issues and documentation first</li> <li>Use GitHub Discussions for questions</li> <li>Join our community chat (link in README)</li> <li>Tag maintainers if you need urgent help</li> </ul>"},{"location":"contributing/#recognition","title":"Recognition","text":"<p>Contributors are recognized in: - CONTRIBUTORS.md file - Release notes for significant contributions - GitHub contributor graphs</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to generatecv, you agree that your contributions will be licensed under the same license as the project (MIT License).</p>"},{"location":"contributing/#questions","title":"Questions?","text":"<p>If you have questions about contributing, please: - Check this document first - Search existing issues and discussions - Create a new discussion for general questions - Create an issue for specific problems</p> <p>Thank you for contributing to generatecv! \ud83c\udf89</p>"},{"location":"examples/","title":"Examples","text":"<p>Here are some comprehensive examples of using generatecv to create professional CVs.</p>"},{"location":"examples/#basic-example","title":"Basic Example","text":"<pre><code>import generatecv\n\n# Simple CV data\ncv_data = {\n    \"personal\": {\n        \"name\": \"Jane Smith\",\n        \"email\": \"jane.smith@example.com\",\n        \"phone\": \"+1 (555) 123-4567\",\n        \"location\": \"San Francisco, CA\",\n        \"linkedin\": \"linkedin.com/in/janesmith\",\n        \"github\": \"github.com/janesmith\"\n    },\n    \"summary\": \"Experienced software engineer with 5+ years in full-stack development\",\n    \"experience\": [\n        {\n            \"title\": \"Senior Software Engineer\",\n            \"company\": \"Tech Corp\",\n            \"location\": \"San Francisco, CA\",\n            \"duration\": \"2021 - Present\",\n            \"description\": \"Lead development of microservices architecture\",\n            \"highlights\": [\n                \"Reduced system latency by 40%\",\n                \"Led team of 5 engineers\",\n                \"Implemented CI/CD pipeline\"\n            ]\n        }\n    ],\n    \"education\": [\n        {\n            \"degree\": \"Bachelor of Science in Computer Science\",\n            \"institution\": \"Stanford University\",\n            \"location\": \"Stanford, CA\",\n            \"year\": \"2019\",\n            \"gpa\": \"3.8/4.0\"\n        }\n    ]\n}\n\n# Generate CV\ncv = generatecv.create_cv(cv_data)\ncv.save(\"jane_smith_cv.pdf\")\n</code></pre>"},{"location":"examples/#academic-cv-example","title":"Academic CV Example","text":"<pre><code>import generatecv\n\nacademic_data = {\n    \"personal\": {\n        \"name\": \"Dr. Michael Chen\",\n        \"email\": \"m.chen@university.edu\",\n        \"phone\": \"+1 (555) 987-6543\",\n        \"location\": \"Boston, MA\",\n        \"website\": \"michaelchen.com\",\n        \"orcid\": \"0000-0000-0000-0000\"\n    },\n    \"summary\": \"Research scientist specializing in machine learning and computer vision\",\n    \"education\": [\n        {\n            \"degree\": \"Ph.D. in Computer Science\",\n            \"field\": \"Machine Learning\",\n            \"institution\": \"MIT\",\n            \"location\": \"Cambridge, MA\",\n            \"year\": \"2020\",\n            \"thesis\": \"Deep Learning Approaches for Medical Image Analysis\",\n            \"advisor\": \"Prof. John Doe\"\n        },\n        {\n            \"degree\": \"M.S. in Computer Science\",\n            \"institution\": \"Stanford University\",\n            \"year\": \"2016\"\n        }\n    ],\n    \"experience\": [\n        {\n            \"title\": \"Postdoctoral Research Associate\",\n            \"company\": \"Harvard Medical School\",\n            \"duration\": \"2020 - Present\",\n            \"description\": \"Research on AI applications in healthcare\"\n        }\n    ],\n    \"publications\": [\n        {\n            \"title\": \"Deep Learning for Medical Image Segmentation\",\n            \"authors\": \"M. Chen, J. Smith, A. Johnson\",\n            \"journal\": \"Nature Machine Intelligence\",\n            \"year\": \"2021\",\n            \"volume\": \"3\",\n            \"pages\": \"123-135\"\n        }\n    ],\n    \"grants\": [\n        {\n            \"title\": \"NIH R01 Grant\",\n            \"amount\": \"$500,000\",\n            \"duration\": \"2021-2024\",\n            \"role\": \"Co-PI\"\n        }\n    ]\n}\n\ncv = generatecv.create_cv(academic_data, template=\"academic\")\ncv.save(\"michael_chen_academic_cv.pdf\")\n</code></pre>"},{"location":"examples/#creative-professional-example","title":"Creative Professional Example","text":"<pre><code>import generatecv\n\ncreative_data = {\n    \"personal\": {\n        \"name\": \"Sarah Williams\",\n        \"email\": \"hello@sarahwilliams.design\",\n        \"phone\": \"+1 (555) 456-7890\",\n        \"location\": \"New York, NY\",\n        \"website\": \"sarahwilliams.design\",\n        \"behance\": \"behance.net/sarahwilliams\",\n        \"instagram\": \"@sarahdesigns\"\n    },\n    \"summary\": \"Award-winning graphic designer with expertise in branding and digital design\",\n    \"experience\": [\n        {\n            \"title\": \"Senior Graphic Designer\",\n            \"company\": \"Creative Agency Inc.\",\n            \"duration\": \"2020 - Present\",\n            \"description\": \"Lead designer for major brand campaigns\",\n            \"highlights\": [\n                \"Designed rebrand for Fortune 500 company\",\n                \"Won 3 design awards in 2022\",\n                \"Managed design team of 4\"\n            ]\n        }\n    ],\n    \"skills\": {\n        \"design\": [\"Adobe Creative Suite\", \"Figma\", \"Sketch\"],\n        \"specialties\": [\"Brand Identity\", \"UI/UX Design\", \"Print Design\"],\n        \"software\": [\"Photoshop\", \"Illustrator\", \"InDesign\", \"After Effects\"]\n    },\n    \"awards\": [\n        {\n            \"title\": \"Best Brand Identity Design\",\n            \"organization\": \"Design Awards 2022\",\n            \"year\": \"2022\"\n        }\n    ],\n    \"portfolio\": [\n        {\n            \"project\": \"Nike Campaign Redesign\",\n            \"description\": \"Complete visual identity overhaul\",\n            \"url\": \"sarahwilliams.design/nike\"\n        }\n    ]\n}\n\ncv = generatecv.create_cv(creative_data, template=\"creative\")\ncv.save(\"sarah_williams_cv.pdf\")\n</code></pre>"},{"location":"examples/#recent-graduate-example","title":"Recent Graduate Example","text":"<pre><code>import generatecv\n\ngraduate_data = {\n    \"personal\": {\n        \"name\": \"Alex Rodriguez\",\n        \"email\": \"alex.rodriguez@email.com\",\n        \"phone\": \"+1 (555) 234-5678\",\n        \"location\": \"Austin, TX\",\n        \"linkedin\": \"linkedin.com/in/alexrodriguez\",\n        \"github\": \"github.com/alexr\"\n    },\n    \"objective\": \"Recent computer science graduate seeking entry-level software engineering position\",\n    \"education\": [\n        {\n            \"degree\": \"Bachelor of Science in Computer Science\",\n            \"institution\": \"University of Texas at Austin\",\n            \"location\": \"Austin, TX\",\n            \"year\": \"2023\",\n            \"gpa\": \"3.7/4.0\",\n            \"honors\": [\"Dean's List\", \"Magna Cum Laude\"],\n            \"relevant_coursework\": [\n                \"Data Structures &amp; Algorithms\",\n                \"Software Engineering\",\n                \"Database Systems\",\n                \"Machine Learning\"\n            ]\n        }\n    ],\n    \"projects\": [\n        {\n            \"name\": \"E-commerce Web Application\",\n            \"description\": \"Full-stack web app with user authentication and payment processing\",\n            \"technologies\": [\"React\", \"Node.js\", \"MongoDB\", \"Stripe API\"],\n            \"url\": \"github.com/alexr/ecommerce-app\",\n            \"highlights\": [\n                \"Implemented responsive design\",\n                \"Integrated secure payment system\",\n                \"Deployed on AWS\"\n            ]\n        },\n        {\n            \"name\": \"Machine Learning Stock Predictor\",\n            \"description\": \"Python application using LSTM networks for stock price prediction\",\n            \"technologies\": [\"Python\", \"TensorFlow\", \"Pandas\", \"NumPy\"],\n            \"url\": \"github.com/alexr/stock-predictor\"\n        }\n    ],\n    \"experience\": [\n        {\n            \"title\": \"Software Engineering Intern\",\n            \"company\": \"StartupXYZ\",\n            \"duration\": \"Summer 2022\",\n            \"description\": \"Developed features for mobile application\",\n            \"highlights\": [\n                \"Contributed to codebase with 50+ commits\",\n                \"Fixed 15+ bugs and implemented 5 new features\",\n                \"Collaborated with cross-functional teams\"\n            ]\n        }\n    ],\n    \"skills\": {\n        \"programming\": [\"Python\", \"JavaScript\", \"Java\", \"C++\"],\n        \"web\": [\"React\", \"HTML/CSS\", \"Node.js\", \"Express\"],\n        \"databases\": [\"MySQL\", \"MongoDB\", \"PostgreSQL\"],\n        \"tools\": [\"Git\", \"Docker\", \"AWS\", \"VS Code\"]\n    }\n}\n\ncv = generatecv.create_cv(graduate_data, template=\"modern\")\ncv.save(\"alex_rodriguez_cv.pdf\")\n</code></pre>"},{"location":"examples/#multiple-format-generation","title":"Multiple Format Generation","text":"<pre><code>import generatecv\n\n# Use the same data for multiple formats\ndata = {...}  # Your CV data\n\ncv = generatecv.create_cv(data)\n\n# Generate in different formats\ncv.save(\"cv.pdf\")\ncv.save(\"cv.html\", format=\"html\")\ncv.save(\"cv.docx\", format=\"docx\")\ncv.save(\"cv.txt\", format=\"text\")\n</code></pre>"},{"location":"examples/#custom-template-options","title":"Custom Template Options","text":"<pre><code>import generatecv\n\n# Custom styling options\ntemplate_options = {\n    \"font_family\": \"Georgia\",\n    \"font_size\": 12,\n    \"line_height\": 1.4,\n    \"margins\": {\n        \"top\": 0.8,\n        \"bottom\": 0.8,\n        \"left\": 0.7,\n        \"right\": 0.7\n    },\n    \"colors\": {\n        \"primary\": \"#2c3e50\",\n        \"secondary\": \"#3498db\",\n        \"accent\": \"#e74c3c\",\n        \"text\": \"#2c3e50\"\n    },\n    \"sections\": {\n        \"show_summary\": True,\n        \"show_skills\": True,\n        \"show_projects\": True,\n        \"experience_format\": \"detailed\"\n    }\n}\n\ncv = generatecv.create_cv(data, template=\"modern\", template_options=template_options)\ncv.save(\"custom_styled_cv.pdf\")\n</code></pre>"},{"location":"examples/#batch-cv-generation","title":"Batch CV Generation","text":"<pre><code>import generatecv\nimport json\n\n# Generate CVs for multiple people\ndef generate_team_cvs():\n    team_data = [\n        {\"name\": \"person1\", \"data\": {...}},\n        {\"name\": \"person2\", \"data\": {...}},\n        {\"name\": \"person3\", \"data\": {...}}\n    ]\n\n    for person in team_data:\n        cv = generatecv.create_cv(person[\"data\"])\n        cv.save(f\"{person['name']}_cv.pdf\")\n        print(f\"Generated CV for {person['name']}\")\n\ngenerate_team_cvs()\n</code></pre>"},{"location":"examples/#loading-data-from-file","title":"Loading Data from File","text":"<pre><code>import generatecv\nimport yaml\nimport json\n\n# Load from YAML\nwith open(\"cv_data.yaml\", \"r\") as file:\n    yaml_data = yaml.safe_load(file)\n\ncv_yaml = generatecv.create_cv(yaml_data)\ncv_yaml.save(\"from_yaml.pdf\")\n\n# Load from JSON\nwith open(\"cv_data.json\", \"r\") as file:\n    json_data = json.load(file)\n\ncv_json = generatecv.create_cv(json_data)\ncv_json.save(\"from_json.pdf\")\n</code></pre>"},{"location":"examples/#error-handling","title":"Error Handling","text":"<pre><code>import generatecv\nfrom generatecv.exceptions import CVError, TemplateError, ValidationError\n\ntry:\n    cv = generatecv.create_cv(data, template=\"invalid_template\")\n    cv.save(\"output.pdf\")\nexcept TemplateError as e:\n    print(f\"Template error: {e}\")\nexcept ValidationError as e:\n    print(f\"Data validation error: {e}\")\nexcept CVError as e:\n    print(f\"CV generation error: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"examples/#template-comparison","title":"Template Comparison","text":"<pre><code>import generatecv\n\n# Generate the same CV with different templates\ntemplates = [\"modern\", \"classic\", \"minimal\", \"creative\"]\n\nfor template in templates:\n    cv = generatecv.create_cv(data, template=template)\n    cv.save(f\"cv_{template}.pdf\")\n    print(f\"Generated {template} version\")\n</code></pre>"},{"location":"examples/#configuration-examples","title":"Configuration Examples","text":"<pre><code>import generatecv\n\n# Set global defaults\ngeneratecv.config.set_default_template(\"modern\")\ngeneratecv.config.set_default_format(\"pdf\")\ngeneratecv.config.set_output_directory(\"./cvs/\")\n\n# Create CV with global settings\ncv = generatecv.create_cv(data)\ncv.save(\"cv_with_defaults.pdf\")\n\n# Override global settings for specific CV\ncv_custom = generatecv.create_cv(data, template=\"minimal\")\ncv_custom.save(\"cv_minimal.pdf\", format=\"html\")\n</code></pre> <p>These examples demonstrate various use cases and features of generatecv. You can adapt them to your specific needs and requirements.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get started with generatecv.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<pre><code>pip install generatecv\n</code></pre> <p>Or using uv:</p> <pre><code>uv add generatecv\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":"<pre><code>import generatecv\n\n# Basic CV generation example\n# Add your examples here\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<p>generatecv can be configured in several ways:</p>"},{"location":"getting-started/#using-a-configuration-file","title":"Using a configuration file","text":"<p>Create a <code>cv_config.yaml</code> file:</p> <pre><code>personal:\n  name: \"Your Name\"\n  email: \"your.email@example.com\"\n  phone: \"+1 234 567 8900\"\n  location: \"Your City, Country\"\n\neducation:\n  - degree: \"Bachelor of Science\"\n    institution: \"University Name\"\n    year: \"2020\"\n\nexperience:\n  - title: \"Software Engineer\"\n    company: \"Company Name\"\n    duration: \"2020 - Present\"\n    description: \"Brief description of your role\"\n</code></pre>"},{"location":"getting-started/#using-python-directly","title":"Using Python directly","text":"<pre><code>import generatecv\n\ncv_data = {\n    \"personal\": {\n        \"name\": \"Your Name\",\n        \"email\": \"your.email@example.com\",\n        \"phone\": \"+1 234 567 8900\",\n        \"location\": \"Your City, Country\"\n    },\n    \"education\": [\n        {\n            \"degree\": \"Bachelor of Science\",\n            \"institution\": \"University Name\",\n            \"year\": \"2020\"\n        }\n    ],\n    \"experience\": [\n        {\n            \"title\": \"Software Engineer\",\n            \"company\": \"Company Name\",\n            \"duration\": \"2020 - Present\",\n            \"description\": \"Brief description of your role\"\n        }\n    ]\n}\n\n# Generate CV\ncv = generatecv.create_cv(cv_data)\ncv.save(\"my_cv.pdf\")\n</code></pre>"},{"location":"getting-started/#templates","title":"Templates","text":"<p>generatecv supports multiple templates:</p> <ul> <li><code>modern</code> - Clean, modern design</li> <li><code>classic</code> - Traditional CV layout</li> <li><code>minimal</code> - Minimalist design</li> <li><code>creative</code> - Creative layout for design roles</li> </ul> <pre><code># Use a specific template\ncv = generatecv.create_cv(cv_data, template=\"modern\")\n</code></pre>"},{"location":"getting-started/#output-formats","title":"Output Formats","text":"<p>Generate your CV in different formats:</p> <pre><code># PDF (default)\ncv.save(\"cv.pdf\")\n\n# HTML\ncv.save(\"cv.html\", format=\"html\")\n\n# Word document\ncv.save(\"cv.docx\", format=\"docx\")\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the API Reference for detailed documentation</li> <li>See Examples for more use cases</li> <li>Learn about Contributing to the project</li> </ul>"},{"location":"api/","title":"API Reference","text":"<p>Auto-generated API documentation for generatecv package.</p>"},{"location":"api/#core-classes","title":"Core Classes","text":""},{"location":"api/#cv","title":"CV","text":"<p>The main class for creating and managing CV documents.</p> <pre><code>from generatecv import CV\n\ncv = CV(data, template=\"modern\")\n</code></pre>"},{"location":"api/#methods","title":"Methods","text":"<ul> <li><code>save(filename, format=\"pdf\")</code> - Save the CV to a file</li> <li><code>render()</code> - Render the CV content</li> <li><code>set_template(template_name)</code> - Change the template</li> </ul>"},{"location":"api/#cvdata","title":"CVData","text":"<p>Data structure for CV information.</p> <pre><code>from generatecv import CVData\n\ndata = CVData({\n    \"personal\": {...},\n    \"education\": [...],\n    \"experience\": [...]\n})\n</code></pre>"},{"location":"api/#functions","title":"Functions","text":""},{"location":"api/#create_cv","title":"create_cv()","text":"<p>Create a new CV instance.</p> <pre><code>generatecv.create_cv(data, template=\"modern\", **kwargs)\n</code></pre> <p>Parameters: - <code>data</code> (dict): CV data dictionary - <code>template</code> (str): Template name (default: \"modern\") - <code>**kwargs</code>: Additional options</p> <p>Returns: - <code>CV</code>: A new CV instance</p>"},{"location":"api/#load_template","title":"load_template()","text":"<p>Load a specific template.</p> <pre><code>generatecv.load_template(name)\n</code></pre> <p>Parameters: - <code>name</code> (str): Template name</p> <p>Returns: - <code>Template</code>: Template object</p>"},{"location":"api/#templates","title":"Templates","text":"<p>Available templates:</p> <ul> <li><code>modern</code> - Clean, modern design</li> <li><code>classic</code> - Traditional CV layout  </li> <li><code>minimal</code> - Minimalist design</li> <li><code>creative</code> - Creative layout</li> </ul>"},{"location":"api/#data-structure","title":"Data Structure","text":""},{"location":"api/#personal-information","title":"Personal Information","text":"<pre><code>personal = {\n    \"name\": \"Full Name\",\n    \"email\": \"email@example.com\",\n    \"phone\": \"+1 234 567 8900\",\n    \"location\": \"City, Country\",\n    \"website\": \"https://example.com\",\n    \"linkedin\": \"linkedin.com/in/username\",\n    \"github\": \"github.com/username\"\n}\n</code></pre>"},{"location":"api/#education","title":"Education","text":"<pre><code>education = [\n    {\n        \"degree\": \"Bachelor of Science\",\n        \"field\": \"Computer Science\",\n        \"institution\": \"University Name\",\n        \"location\": \"City, Country\",\n        \"year\": \"2020\",\n        \"gpa\": \"3.8/4.0\",\n        \"honors\": [\"Magna Cum Laude\"]\n    }\n]\n</code></pre>"},{"location":"api/#experience","title":"Experience","text":"<pre><code>experience = [\n    {\n        \"title\": \"Software Engineer\",\n        \"company\": \"Company Name\",\n        \"location\": \"City, Country\",\n        \"duration\": \"2020 - Present\",\n        \"description\": \"Brief description of role and achievements\",\n        \"highlights\": [\n            \"Achievement 1\",\n            \"Achievement 2\"\n        ]\n    }\n]\n</code></pre>"},{"location":"api/#skills","title":"Skills","text":"<pre><code>skills = {\n    \"programming\": [\"Python\", \"JavaScript\", \"Java\"],\n    \"frameworks\": [\"Django\", \"React\", \"Spring\"],\n    \"tools\": [\"Git\", \"Docker\", \"AWS\"],\n    \"languages\": [\"English (Native)\", \"Spanish (Fluent)\"]\n}\n</code></pre>"},{"location":"api/#projects","title":"Projects","text":"<pre><code>projects = [\n    {\n        \"name\": \"Project Name\",\n        \"description\": \"Brief project description\",\n        \"technologies\": [\"Python\", \"Django\", \"PostgreSQL\"],\n        \"url\": \"https://github.com/username/project\",\n        \"highlights\": [\n            \"Key achievement 1\",\n            \"Key achievement 2\"\n        ]\n    }\n]\n</code></pre>"},{"location":"api/#configuration","title":"Configuration","text":""},{"location":"api/#global-settings","title":"Global Settings","text":"<pre><code>import generatecv\n\ngeneratecv.config.set_default_template(\"modern\")\ngeneratecv.config.set_output_format(\"pdf\")\n</code></pre>"},{"location":"api/#template-options","title":"Template Options","text":"<pre><code>template_options = {\n    \"font_family\": \"Arial\",\n    \"font_size\": 11,\n    \"margins\": {\n        \"top\": 1.0,\n        \"bottom\": 1.0,\n        \"left\": 0.75,\n        \"right\": 0.75\n    },\n    \"colors\": {\n        \"primary\": \"#2c3e50\",\n        \"secondary\": \"#3498db\",\n        \"text\": \"#333333\"\n    }\n}\n\ncv = generatecv.create_cv(data, template_options=template_options)\n</code></pre>"},{"location":"api/#exceptions","title":"Exceptions","text":""},{"location":"api/#cverror","title":"CVError","text":"<p>Base exception for generatecv errors.</p> <pre><code>from generatecv.exceptions import CVError\n</code></pre>"},{"location":"api/#templateerror","title":"TemplateError","text":"<p>Raised when template-related errors occur.</p> <pre><code>from generatecv.exceptions import TemplateError\n</code></pre>"},{"location":"api/#validationerror","title":"ValidationError","text":"<p>Raised when data validation fails.</p> <pre><code>from generatecv.exceptions import ValidationError\n</code></pre>"},{"location":"api/#examples","title":"Examples","text":""},{"location":"api/#basic-usage","title":"Basic Usage","text":"<pre><code>import generatecv\n\ndata = {\n    \"personal\": {\n        \"name\": \"John Doe\",\n        \"email\": \"john@example.com\"\n    },\n    \"education\": [...],\n    \"experience\": [...]\n}\n\ncv = generatecv.create_cv(data)\ncv.save(\"john_doe_cv.pdf\")\n</code></pre>"},{"location":"api/#custom-template","title":"Custom Template","text":"<pre><code>cv = generatecv.create_cv(data, template=\"minimal\")\ncv.save(\"minimal_cv.pdf\")\n</code></pre>"},{"location":"api/#multiple-formats","title":"Multiple Formats","text":"<pre><code>cv = generatecv.create_cv(data)\ncv.save(\"cv.pdf\")\ncv.save(\"cv.html\", format=\"html\")\ncv.save(\"cv.docx\", format=\"docx\")\n</code></pre>"}]}