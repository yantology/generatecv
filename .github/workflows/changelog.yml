name: Auto Changelog

on:
  push:
    branches: [main]
  release:
    types: [published]
    
  # Also trigger before release creation to update changelog
  workflow_call:
    inputs:
      version:
        description: 'Version to generate changelog for'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: read

jobs:
  changelog:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_call'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Changelog
        uses: orhun/git-cliff-action@v3
        id: git-cliff
        with:
          config: .github/cliff.toml
          # For workflow_call, specify the tag (version) to generate the changelog for.
          # For push events, this will be empty, and 'unreleased' will be true.
          tag: ${{ github.event_name == 'workflow_call' && inputs.version || '' }}
          # For push events (e.g., merges to main), generate the 'unreleased' section.
          # For workflow_call, this will be false, as 'tag' is specified.
          unreleased: ${{ github.event_name == 'push' }}
          # Common arguments for verbosity and stripping the "Generated by git-cliff" part from the main CHANGELOG.md
          args: --verbose --strip header
        env:
          OUTPUT: CHANGELOG.md

      - name: Create cliff config if missing
        run: |
          mkdir -p .github
          if [ ! -f .github/cliff.toml ]; then
            cat > .github/cliff.toml << 'EOF'
          [changelog]
          header = """
          # Changelog
          All notable changes to this project will be documented in this file.

          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

          """
          body = """
          {% if version %}\
              ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
          {% else %}\
              ## [unreleased]
          {% endif %}\
          {% for group, commits in commits | group_by(attribute="group") %}
              ### {{ group | striptags | trim | upper_first }}
              {% for commit in commits %}
                  - {% if commit.scope %}**{{commit.scope}}:** {% endif %}{{ commit.message | upper_first }}\
                  {% if commit.links %} ([{{ commit.id | truncate(length=7, end="") }}]({{ commit.links[0].href }})){% endif %}
              {% endfor %}
          {% endfor %}\n
          """
          trim = true
          footer = """
          <!-- generated by git-cliff -->
          """

          [git]
          conventional_commits = true
          filter_unconventional = true
          split_commits = false
          commit_preprocessors = []
          commit_parsers = [
              { message = "^feat", group = "Features" },
              { message = "^fix", group = "Bug Fixes" },
              { message = "^docs", group = "Documentation" },
              { message = "^perf", group = "Performance" },
              { message = "^refactor", group = "Refactoring" },
              { message = "^style", group = "Styling" },
              { message = "^test", group = "Testing" },
              { message = "^chore\\(release\\): prepare for", skip = true },
              { message = "^chore", group = "Miscellaneous Tasks" },
              { body = ".*security", group = "Security" },
              { message = "^revert", group = "Revert" },
          ]
          protect_breaking_commits = false
          filter_commits = false
          tag_pattern = "v[0-9]*"
          skip_tags = "v0.1.0-beta.1"
          ignore_tags = ""
          topo_order = false
          sort_commits = "oldest"
          link_parsers = []
          EOF
          fi

      - name: Check for changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit changelog
        if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name == 'push'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md .github/cliff.toml
          git commit -m "docs: update changelog [skip ci]"
          git push

  update-release-notes:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name }}

      - name: Generate release notes from changelog
        uses: orhun/git-cliff-action@v3
        with:
          config: .github/cliff.toml
          args: --verbose --latest --strip all
        env:
          OUTPUT: release_notes.md

      - name: Update release with changelog
        if: github.event.release.body == ''
        run: |
          if [ -f release_notes.md ] && [ -s release_notes.md ]; then
            gh release edit ${{ github.event.release.tag_name }} --notes-file release_notes.md
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}