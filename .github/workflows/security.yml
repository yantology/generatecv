name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 12 */3 * *'  # Every 3 days at 12:00
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read
  security-events: write

jobs:
  security:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'
    
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Initialize security report
      run: |
        echo "# 🔍 Security Scan Report" > security-report.md
        echo "" >> security-report.md
        echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-report.md
        echo "**Repository:** ${{ github.repository }}" >> security-report.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
        echo "**Commit:** ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
    
    - name: Run vulnerability scan with multiple tools
      id: vulnerability_scan
      run: |
        echo "## 🚨 Dependency Vulnerabilities" >> security-report.md
        echo "" >> security-report.md
        
        # Try pip-audit first
        echo "### pip-audit scan:" >> security-report.md
        echo '```' >> security-report.md
        if uv add --dev pip-audit && uv run pip-audit --format=columns --output vulns.txt 2>&1; then
          if [ -f vulns.txt ] && [ -s vulns.txt ]; then
            echo "❌ **Vulnerabilities detected by pip-audit:**" >> security-report.md
            echo "" >> security-report.md
            cat vulns.txt | head -50 >> security-report.md
            echo "has_vulns=true" >> $GITHUB_OUTPUT
          else
            echo "✅ **No vulnerabilities found by pip-audit**" >> security-report.md
          fi
        else
          echo "⚠️ **pip-audit scan failed or encountered errors**" >> security-report.md
          uv run pip-audit 2>&1 | head -20 >> security-report.md || echo "Could not run pip-audit" >> security-report.md
        fi
        echo '```' >> security-report.md
        echo "" >> security-report.md
        
        # Try safety as backup
        echo "### safety scan (backup):" >> security-report.md
        echo '```' >> security-report.md
        if uv add --dev safety; then
          if uv run safety check --json --output safety.json 2>/dev/null; then
            if [ -f safety.json ] && [ -s safety.json ]; then
              echo "❌ **Vulnerabilities detected by safety:**" >> security-report.md
              uv run safety check 2>&1 | head -30 >> security-report.md || echo "Could not display safety results" >> security-report.md
              echo "has_vulns=true" >> $GITHUB_OUTPUT
            else
              echo "✅ **No vulnerabilities found by safety**" >> security-report.md
              if [ -z "${{ env.has_vulns }}" ]; then
                echo "has_vulns=false" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "⚠️ **Safety scan completed with warnings or deprecated**" >> security-report.md
            uv run safety check 2>&1 | head -20 >> security-report.md || echo "Could not run safety check" >> security-report.md
            if [ -z "${{ env.has_vulns }}" ]; then
              echo "has_vulns=false" >> $GITHUB_OUTPUT
            fi
          fi
        else
          echo "⚠️ **Could not install safety**" >> security-report.md
          if [ -z "${{ env.has_vulns }}" ]; then
            echo "has_vulns=false" >> $GITHUB_OUTPUT
          fi
        fi
        echo '```' >> security-report.md
        echo "" >> security-report.md
    
    - name: Run code security scan with Bandit
      id: code_scan
      run: |
        uv add --dev bandit[toml]
        echo "## 🔍 Code Security Analysis" >> security-report.md
        echo "" >> security-report.md
        
        if uv run bandit -r src/ -f json -o bandit.json 2>/dev/null; then
          echo "✅ **No code security issues found!**" >> security-report.md
          echo "has_code_issues=false" >> $GITHUB_OUTPUT
        else
          echo "❌ **Code security issues detected:**" >> security-report.md
          echo "" >> security-report.md
          echo '```' >> security-report.md
          uv run bandit -r src/ -f txt 2>&1 | head -30 >> security-report.md || echo "Error running code security scan" >> security-report.md
          echo '```' >> security-report.md
          echo "has_code_issues=true" >> $GITHUB_OUTPUT
        fi
        echo "" >> security-report.md
    
    - name: Add scan summary
      run: |
        echo "## 📊 Scan Summary" >> security-report.md
        echo "" >> security-report.md
        echo "- **Dependencies scanned:** $(uv run python -c "import importlib.metadata; print(len([d for d in importlib.metadata.distributions()]))" 2>/dev/null || echo "N/A")" >> security-report.md
        echo "- **Python files scanned:** $(find src/ -name "*.py" | wc -l)" >> security-report.md
        echo "- **Vulnerabilities found:** ${{ steps.vulnerability_scan.outputs.has_vulns == 'true' && 'Yes' || 'No' }}" >> security-report.md
        echo "- **Code issues found:** ${{ steps.code_scan.outputs.has_code_issues == 'true' && 'Yes' || 'No' }}" >> security-report.md
        echo "" >> security-report.md
        echo "---" >> security-report.md
        echo "*This report was generated automatically by the security scanning workflow.*" >> security-report.md
    
    - name: Upload security reports as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_id }}
        path: |
          security-report.md
          vulns.json
          bandit.json
        retention-days: 30
    
    - name: Save security report to repository
      if: always() && github.ref == 'refs/heads/main'
      run: |
        mkdir -p .github/security-reports
        cp security-report.md .github/security-reports/$(date +%Y-%m-%d-%H%M).md
        
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .github/security-reports/
        git commit -m "📊 Security scan report $(date +%Y-%m-%d)" || echo "No changes to commit"
        git push || echo "Could not push to repository - check permissions"
    
    - name: Close existing security issues
      if: steps.vulnerability_scan.outputs.has_vulns == 'true' || steps.code_scan.outputs.has_code_issues == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security-scan',
              state: 'open'
            });
            
            for (const issue of issues) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed',
                state_reason: 'completed'
              });
            }
          } catch (error) {
            console.log('Error closing existing issues:', error.message);
          }
    
    - name: Create GitHub Issue for security findings
      if: steps.vulnerability_scan.outputs.has_vulns == 'true' || steps.code_scan.outputs.has_code_issues == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const fs = require('fs');
            const reportContent = fs.readFileSync('security-report.md', 'utf8');
            
            const priority = '${{ steps.vulnerability_scan.outputs.has_vulns }}' === 'true' ? 'high-priority' : 'medium-priority';
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Security Alert - ${new Date().toISOString().split('T')[0]}`,
              body: `${reportContent}
              
              ---
              **Workflow Run:** [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})
              **Triggered by:** ${context.eventName}
              **Actor:** ${context.actor}
              
              > ⚠️ This issue was automatically created by security scanning workflow.
              > Please review and address the findings above.`,
              labels: ['security-scan', 'automated', priority, 'needs-triage']
            });
          } catch (error) {
            console.log('Error creating security issue:', error.message);
            core.setFailed(`Failed to create security issue: ${error.message}`);
          }