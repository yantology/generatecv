name: Auto Label

on:
  issues:
    types: [opened]
  pull_request:
    types: [opened]

jobs:
  label:
    name: Auto Label Issues and PRs
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    
    steps:
    - name: Label new issues
      if: github.event_name == 'issues'
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.payload.issue;
          const title = issue.title.toLowerCase();
          const body = issue.body ? issue.body.toLowerCase() : '';
          
          let labels = ['triage'];
          
          // Security related
          if (title.includes('security') || title.includes('vulnerability') || title.includes('cve')) {
            labels.push('security');
          }
          
          // Bug reports
          if (title.includes('bug') || title.includes('error') || title.includes('fail') || 
              body.includes('traceback') || body.includes('exception')) {
            labels.push('bug');
          }
          
          // Feature requests
          if (title.includes('feature') || title.includes('enhancement') || title.includes('add')) {
            labels.push('enhancement');
          }
          
          // Documentation
          if (title.includes('doc') || title.includes('readme') || title.includes('guide')) {
            labels.push('documentation');
          }
          
          // Questions
          if (title.includes('question') || title.includes('how to') || title.includes('help')) {
            labels.push('question');
          }
          
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue.number,
            labels: labels
          });
    
    - name: Label new pull requests
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          const title = pr.title.toLowerCase();
          const body = pr.body ? pr.body.toLowerCase() : '';
          
          let labels = [];
          
          // Size labels based on changes
          const additions = pr.additions || 0;
          const deletions = pr.deletions || 0;
          const totalChanges = additions + deletions;
          
          if (totalChanges < 10) {
            labels.push('size/XS');
          } else if (totalChanges < 30) {
            labels.push('size/S');
          } else if (totalChanges < 100) {
            labels.push('size/M');
          } else if (totalChanges < 500) {
            labels.push('size/L');
          } else {
            labels.push('size/XL');
          }
          
          // Type labels
          if (title.includes('fix') || title.includes('bug')) {
            labels.push('bug');
          }
          
          if (title.includes('feat') || title.includes('add') || title.includes('new')) {
            labels.push('enhancement');
          }
          
          if (title.includes('doc') || title.includes('readme')) {
            labels.push('documentation');
          }
          
          if (title.includes('test') || title.includes('spec')) {
            labels.push('tests');
          }
          
          if (title.includes('ci') || title.includes('workflow') || title.includes('action')) {
            labels.push('github-actions');
          }
          
          if (title.includes('deps') || title.includes('dependency') || title.includes('update')) {
            labels.push('dependencies');
          }
          
          // Breaking changes
          if (title.includes('!') || body.includes('breaking change') || body.includes('breaking:')) {
            labels.push('breaking-change');
          }
          
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: labels
            });
          }