{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"generatecv","text":"<p>Professional CV/Resume generator for Python.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Generate professional CVs from structured data</li> <li>Multiple output formats (PDF, etc.)</li> <li>Customizable templates</li> <li>Easy to use Python API</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>pip install generatecv\n</code></pre> <pre><code>import generatecv\n\n# Your CV generation code here\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Getting Started</li> <li>API Reference</li> <li>Examples</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome contributions to generatecv! This document provides guidelines for contributing to the project.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>uv package manager</li> </ul>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:</li> </ol> <pre><code>git clone https://github.com/yourusername/generatecv.git\ncd generatecv\n</code></pre> <ol> <li>Install dependencies using uv:</li> </ol> <pre><code>uv sync --dev\n</code></pre> <ol> <li>Create a virtual environment and activate it:</li> </ol> <pre><code>uv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#making-changes","title":"Making Changes","text":"<ol> <li>Create a new branch for your feature or bugfix:</li> </ol> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <ol> <li> <p>Make your changes following the coding standards below</p> </li> <li> <p>Write or update tests for your changes</p> </li> <li> <p>Run the test suite to ensure everything works:</p> </li> </ol> <pre><code>uv run pytest\n</code></pre> <ol> <li>Run code quality checks:</li> </ol> <pre><code>uv run ruff check .\nuv run ruff format .\nuv run pyright\n</code></pre>"},{"location":"contributing/#code-quality-standards","title":"Code Quality Standards","text":"<p>We maintain high code quality standards using several tools:</p>"},{"location":"contributing/#code-formatting","title":"Code Formatting","text":"<ul> <li>Ruff: For code formatting and import sorting</li> <li>Run <code>uv run ruff format .</code> to format your code</li> <li>Run <code>uv run ruff check .</code> to check for issues</li> </ul>"},{"location":"contributing/#type-checking","title":"Type Checking","text":"<ul> <li>Pyright: For static type checking</li> <li>Run <code>uv run pyright</code> to check types</li> <li>Add type hints to all new functions and classes</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<ul> <li>pytest: For running tests</li> <li>Aim for high test coverage (&gt;90%)</li> <li>Write unit tests for all new functionality</li> <li>Include integration tests where appropriate</li> </ul>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nuv run pytest\n\n# Run tests with coverage\nuv run pytest --cov=generatecv\n\n# Run specific test file\nuv run pytest tests/test_specific.py\n\n# Run tests in watch mode during development\nuv run pytest-watch\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Update documentation for any new features</li> <li>Use docstrings with Google style formatting</li> <li>Update the changelog for significant changes</li> <li>Build documentation locally to test:</li> </ul> <pre><code>uv run mkdocs serve\n</code></pre>"},{"location":"contributing/#contribution-guidelines","title":"Contribution Guidelines","text":""},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure your code passes all tests and quality checks</li> <li>Update documentation as needed</li> <li>Add entries to CHANGELOG.md for significant changes</li> <li>Create a pull request with:</li> <li>Clear title and description</li> <li>Reference any related issues</li> <li>Include screenshots for UI changes</li> <li>List any breaking changes</li> </ol>"},{"location":"contributing/#commit-message-convention","title":"Commit Message Convention","text":"<p>We follow conventional commit format:</p> <pre><code>type(scope): description\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation changes - <code>style</code>: Code style changes - <code>refactor</code>: Code refactoring - <code>test</code>: Test changes - <code>chore</code>: Build/tooling changes</p> <p>Examples: <pre><code>feat(templates): add new minimal template\nfix(pdf): resolve font rendering issue\ndocs(api): update CV class documentation\n</code></pre></p>"},{"location":"contributing/#code-style-guidelines","title":"Code Style Guidelines","text":""},{"location":"contributing/#python-code-style","title":"Python Code Style","text":"<ul> <li>Follow PEP 8 conventions</li> <li>Use meaningful variable and function names</li> <li>Keep functions small and focused</li> <li>Add docstrings to all public functions and classes</li> <li>Use type hints consistently</li> </ul>"},{"location":"contributing/#docstring-format","title":"Docstring Format","text":"<p>Use Google style docstrings:</p> <pre><code>def create_cv(data: dict, template: str = \"modern\") -&gt; CV:\n    \"\"\"Create a new CV instance.\n\n    Args:\n        data: Dictionary containing CV data\n        template: Template name to use (default: \"modern\")\n\n    Returns:\n        A new CV instance\n\n    Raises:\n        ValidationError: If data validation fails\n        TemplateError: If template is not found\n\n    Example:\n        &gt;&gt;&gt; cv = create_cv({\"personal\": {\"name\": \"John Doe\"}})\n        &gt;&gt;&gt; cv.save(\"cv.pdf\")\n    \"\"\"\n</code></pre>"},{"location":"contributing/#project-structure","title":"Project Structure","text":"<pre><code>generatecv/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 generatecv/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 core/           # Core CV functionality\n\u2502       \u251c\u2500\u2500 templates/      # CV templates\n\u2502       \u251c\u2500\u2500 exporters/      # Output format exporters\n\u2502       \u2514\u2500\u2500 utils/          # Utility functions\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 unit/              # Unit tests\n\u2502   \u251c\u2500\u2500 integration/       # Integration tests\n\u2502   \u2514\u2500\u2500 fixtures/          # Test data\n\u251c\u2500\u2500 docs/                  # Documentation\n\u251c\u2500\u2500 examples/              # Usage examples\n\u2514\u2500\u2500 scripts/               # Development scripts\n</code></pre>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#bug-reports","title":"Bug Reports","text":"<p>When filing a bug report, please include: - Python version and operating system - generatecv version - Minimal code example that reproduces the issue - Expected vs actual behavior - Error messages and stack traces</p>"},{"location":"contributing/#feature-requests","title":"Feature Requests","text":"<p>For feature requests, please: - Describe the feature and its use case - Explain why it would be valuable - Consider if it fits the project scope - Propose an implementation approach if possible</p>"},{"location":"contributing/#code-contributions","title":"Code Contributions","text":"<p>We welcome contributions in these areas: - Bug fixes - New CV templates - Output format support - Performance improvements - Documentation improvements - Test coverage improvements</p>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>Releases are managed by maintainers and follow semantic versioning: - Major version: Breaking changes - Minor version: New features (backward compatible) - Patch version: Bug fixes</p>"},{"location":"contributing/#community-guidelines","title":"Community Guidelines","text":""},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>We are committed to providing a welcoming and inclusive environment: - Be respectful and professional - Welcome newcomers and help them get started - Focus on constructive feedback - Respect different viewpoints and experiences</p>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Check existing issues and documentation first</li> <li>Use GitHub Discussions for questions</li> <li>Join our community chat (link in README)</li> <li>Tag maintainers if you need urgent help</li> </ul>"},{"location":"contributing/#recognition","title":"Recognition","text":"<p>Contributors are recognized in: - CONTRIBUTORS.md file - Release notes for significant contributions - GitHub contributor graphs</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to generatecv, you agree that your contributions will be licensed under the same license as the project (MIT License).</p>"},{"location":"contributing/#questions","title":"Questions?","text":"<p>If you have questions about contributing, please: - Check this document first - Search existing issues and discussions - Create a new discussion for general questions - Create an issue for specific problems</p> <p>Thank you for contributing to generatecv! \ud83c\udf89</p>"},{"location":"examples/","title":"Examples","text":"<p>Here are some comprehensive examples of using <code>generatecv</code> to create professional CVs in PDF format.</p>"},{"location":"examples/#basic-example-python-data","title":"Basic Example (Python Data)","text":"<p>This example shows how to define CV data directly in Python using the Pydantic models and then generate a PDF.</p> <pre><code>from generatecv.pdf_generator import generatepdf\nfrom generatecv.models import (\n    CV, PersonalInfo, Education, CompanyExperience, Role, Skill, Project,\n    Certificate, Language, Reference\n)\n\n# 1. Construct your CV data using Pydantic models\ncv_data = CV(\n    personal_info=PersonalInfo(\n        name=\"Jane Smith\",\n        email=\"jane.smith@example.com\",\n        phone=\"+1 (555) 123-4567\",\n        location=\"San Francisco, CA\",\n        linkedin=\"https://linkedin.com/in/janesmith\",\n        github=\"https://github.com/janesmith\",\n        summary=\"Experienced software engineer with 5+ years in full-stack development.\",\n        title=\"Senior Software Engineer\"\n    ),\n    experience=[\n        CompanyExperience(\n            company=\"Tech Corp\",\n            location=\"San Francisco, CA\",\n            roles=[\n                Role(\n                    title=\"Senior Software Engineer\",\n                    start_date=\"2021-01\",\n                    end_date=\"Present\",\n                    description=\"Lead development of microservices architecture.\",\n                    achievements=[\n                        \"Reduced system latency by 40%\",\n                        \"Led team of 5 engineers\",\n                        \"Implemented CI/CD pipeline\"\n                    ]\n                )\n            ]\n        )\n    ],\n    education=[\n        Education(\n            institution=\"Stanford University\",\n            degree=\"Bachelor of Science in Computer Science\",\n            location=\"Stanford, CA\",\n            start_date=\"2015-09\",\n            end_date=\"2019-06\",\n            gpa=\"3.8/4.0\"\n        )\n    ],\n    skills=[\n        Skill(category=\"Programming Languages\", name=\"Python, JavaScript, Java\"),\n        Skill(category=\"Frameworks/Tools\", name=\"React, Docker, AWS, Django\")\n    ],\n    projects=[\n        Project(\n            name=\"Open Source Contribution\",\n            description=\"Contributed to a popular open-source library.\",\n            technologies=[\"Python\", \"Git\"],\n            link=\"https://github.com/janesmith/project-example\"\n        )\n    ],\n    languages=[\n        Language(name=\"English\", proficiency=\"Native\"),\n        Language(name=\"Spanish\", proficiency=\"Conversational\")\n    ]\n    # You can add certifications, references, publications, awards, interests, custom_sections as needed\n)\n\n# 2. Generate the CV PDF\ntry:\n    output_pdf_path = generatepdf(\n        cv_data=cv_data,\n        output_path=\"jane_smith_cv.pdf\",\n        style=\"classic\",  # Currently 'classic' is the main style\n        page_size=\"A4\"    # 'A4' or 'letter'\n    )\n    print(f\"CV successfully generated at: {output_pdf_path}\")\nexcept ValueError as e:\n    print(f\"Error during PDF generation: {e}\")\nexcept Exception as e:\n    print(f\"An unexpected error occurred: {e}\")\n</code></pre>"},{"location":"examples/#generating-from-a-yaml-file","title":"Generating from a YAML File","text":"<p><code>generatecv</code> can load CV data from a YAML file.</p> <p>1. Create your YAML data file (e.g., <code>my_cv_data.yaml</code>):</p> <pre><code>personal_info:\n  name: \"Dr. Michael Chen\"\n  email: \"m.chen@university.edu\"\n  phone: \"+1 (555) 987-6543\"\n  location: \"Boston, MA\"\n  website: \"http://michaelchen.com\" # Ensure HttpUrl validity\n  # orcid: \"0000-0000-0000-0000\" # Not a standard field in PersonalInfo, use custom_sections or summary\n  summary: \"Research scientist specializing in machine learning and computer vision. ORCID: 0000-0000-0000-0000\"\n  title: \"Research Scientist\"\n\neducation:\n  - institution: \"MIT\"\n    degree: \"Ph.D. in Computer Science\"\n    # field: \"Machine Learning\" # Not a direct field in Education model, combine with degree or details\n    details: \"Field: Machine Learning. Thesis: Deep Learning Approaches for Medical Image Analysis. Advisor: Prof. John Doe\"\n    start_date: \"2016-09\"\n    end_date: \"2020-05\"\n    location: \"Cambridge, MA\"\n  - institution: \"Stanford University\"\n    degree: \"M.S. in Computer Science\"\n    start_date: \"2014-09\"\n    end_date: \"2016-06\"\n\nexperience: # This should be a list of CompanyExperience\n  - company: \"Harvard Medical School\" # This is a CompanyExperience item\n    roles: # It needs a 'roles' list\n      - title: \"Postdoctoral Research Associate\"\n        start_date: \"2020-06\"\n        end_date: \"Present\"\n        description: \"Research on AI applications in healthcare.\"\n\npublications: # This is a list of strings\n  - \"Chen, M., Smith, J., Johnson, A. (2021). Deep Learning for Medical Image Segmentation. Nature Machine Intelligence, 3, 123-135.\"\n\n# grants: # Not a direct field in CV model, use custom_sections\n#   - title: \"NIH R01 Grant\"\n#     amount: \"$500,000\"\n#     duration: \"2021-2024\"\n#     role: \"Co-PI\"\ncustom_sections:\n  grants:\n    - \"NIH R01 Grant: $500,000, Duration: 2021-2024, Role: Co-PI\"\n\n# ... other sections like skills, projects, etc.\n</code></pre> <p>2. Python script to load YAML and generate PDF:</p> <pre><code>from generatecv.pdf_generator import yamltocv, generatepdf\nfrom generatecv.models import CV # For type hinting\nfrom pydantic import ValidationError\nimport yaml # For yaml.YAMLError\n\nyaml_file = \"my_cv_data.yaml\" # Path to your YAML file\noutput_pdf = \"michael_chen_academic_cv.pdf\"\n\ntry:\n    # Load and validate data from YAML\n    # Note: yamltocv has parameters output_path, style, page_size which are not used.\n    cv_data_from_yaml: CV = yamltocv(yaml_path=yaml_file)\n\n    # Generate PDF using the loaded data\n    generated_path = generatepdf(\n        cv_data=cv_data_from_yaml,\n        output_path=output_pdf,\n        style=\"classic\",\n        page_size=\"A4\"\n    )\n    print(f\"Academic CV generated from YAML and saved to: {generated_path}\")\n\nexcept FileNotFoundError:\n    print(f\"Error: The YAML file '{yaml_file}' was not found.\")\nexcept yaml.YAMLError as e:\n    print(f\"Error: The YAML file '{yaml_file}' is not valid YAML. Details: {e}\")\nexcept ValidationError as ve:\n    print(f\"Data validation error in '{yaml_file}': {ve}\")\nexcept ValueError as ve_gen: # For errors from generatepdf (e.g. invalid style)\n    print(f\"PDF generation error: {ve_gen}\")\nexcept Exception as e:\n    print(f\"An unexpected error occurred: {e}\")\n</code></pre>"},{"location":"examples/#creative-professional-example-using-python-data","title":"Creative Professional Example (using Python data)","text":"<p>This example focuses on a creative professional, showcasing how to structure data for skills and projects.</p> <pre><code>from generatecv.pdf_generator import generatepdf\nfrom generatecv.models import CV, PersonalInfo, CompanyExperience, Role, Skill, Project, Award # Assuming Award model exists or use custom_sections\n\n# Data for a creative professional\ncreative_data = CV(\n    personal_info=PersonalInfo(\n        name=\"Sarah Williams\",\n        email=\"hello@sarahwilliams.design\",\n        phone=\"+1 (555) 456-7890\",\n        location=\"New York, NY\",\n        website=\"http://sarahwilliams.design\", # Ensure HttpUrl validity\n        # behance: \"behance.net/sarahwilliams\", # Use custom_sections or summary\n        # instagram: \"@sarahdesigns\" # Use custom_sections or summary\n        summary=\"Award-winning graphic designer with expertise in branding and digital design. Behance: behance.net/sarahwilliams, Instagram: @sarahdesigns\",\n        title=\"Senior Graphic Designer\"\n    ),\n    experience=[\n        CompanyExperience(\n            company=\"Creative Agency Inc.\",\n            roles=[\n                Role(\n                    title=\"Senior Graphic Designer\",\n                    start_date=\"2020-03\",\n                    end_date=\"Present\",\n                    description=\"Lead designer for major brand campaigns.\",\n                    achievements=[\n                        \"Designed rebrand for Fortune 500 company\",\n                        \"Won 3 design awards in 2022\",\n                        \"Managed design team of 4\"\n                    ]\n                )\n            ]\n        )\n    ],\n    skills=[\n        Skill(category=\"Design Software\", name=\"Adobe Creative Suite (Photoshop, Illustrator, InDesign), Figma, Sketch\"),\n        Skill(category=\"Specialties\", name=\"Brand Identity, UI/UX Design, Print Design, Motion Graphics\")\n    ],\n    projects=[ # 'portfolio' can be represented as 'projects'\n        Project(\n            name=\"Nike Campaign Redesign\",\n            description=\"Complete visual identity overhaul for a major sports brand.\",\n            link=\"http://sarahwilliams.design/nike\", # Ensure HttpUrl validity\n            technologies=[\"Branding\", \"Adobe Illustrator\", \"Adobe Photoshop\"]\n        ),\n        Project(\n            name=\"Mobile App UI/UX\",\n            description=\"Designed user interface and experience for a new lifestyle app.\",\n            technologies=[\"Figma\", \"User Research\", \"Prototyping\"]\n        )\n    ],\n    awards=[ # list of strings\n        \"Best Brand Identity Design - Design Awards 2022\",\n        \"Gold Medal for Digital Illustration - Creative Annual 2021\"\n    ]\n    # education, certifications, etc. can be added as needed\n)\n\n# Generate PDF\ntry:\n    pdf_path = generatepdf(\n        cv_data=creative_data,\n        output_path=\"sarah_williams_creative_cv.pdf\",\n        style=\"classic\" # You might want a 'creative' style in the future\n    )\n    print(f\"Creative CV generated at: {pdf_path}\")\nexcept Exception as e:\n    print(f\"Error generating creative CV: {e}\")\n</code></pre>"},{"location":"examples/#recent-graduate-example-python-data","title":"Recent Graduate Example (Python Data)","text":"<p>Tailored for a recent graduate, emphasizing education, projects, and internships.</p> <pre><code>from generatecv.pdf_generator import generatepdf\nfrom generatecv.models import CV, PersonalInfo, Education, Project, CompanyExperience, Role, Skill\n\ngraduate_data = CV(\n    personal_info=PersonalInfo(\n        name=\"Alex Rodriguez\",\n        email=\"alex.rodriguez@email.com\",\n        phone=\"+1 (555) 234-5678\",\n        location=\"Austin, TX\",\n        linkedin=\"https://linkedin.com/in/alexrodriguez\",\n        github=\"https://github.com/alexr\",\n        summary=\"Recent computer science graduate seeking an entry-level software engineering position. Eager to apply academic knowledge and internship experience to real-world challenges.\",\n        title=\"Aspiring Software Engineer\"\n    ),\n    education=[\n        Education(\n            institution=\"University of Texas at Austin\",\n            degree=\"Bachelor of Science in Computer Science\",\n            location=\"Austin, TX\",\n            start_date=\"2019-08\",\n            end_date=\"2023-05\",\n            gpa=\"3.7/4.0\",\n            details=\"Honors: Dean's List, Magna Cum Laude. Relevant Coursework: Data Structures &amp; Algorithms, Software Engineering, Database Systems, Machine Learning.\"\n        )\n    ],\n    projects=[\n        Project(\n            name=\"E-commerce Web Application\",\n            description=\"Full-stack web app with user authentication and payment processing.\",\n            technologies=[\"React\", \"Node.js\", \"MongoDB\", \"Stripe API\"],\n            link=\"https://github.com/alexr/ecommerce-app\", # Ensure HttpUrl validity\n            achievements=[\n                \"Implemented responsive design for optimal viewing on all devices.\",\n                \"Integrated secure payment system using Stripe API.\",\n                \"Deployed on AWS Elastic Beanstalk.\"\n            ],\n            start_date=\"2022-09\",\n            end_date=\"2023-01\"\n        ),\n        Project(\n            name=\"Machine Learning Stock Predictor\",\n            description=\"Python application using LSTM networks for stock price prediction.\",\n            technologies=[\"Python\", \"TensorFlow\", \"Pandas\", \"NumPy\"],\n            link=\"https://github.com/alexr/stock-predictor\" # Ensure HttpUrl validity\n        )\n    ],\n    experience=[ # For internships\n        CompanyExperience(\n            company=\"StartupXYZ\",\n            location=\"Austin, TX (Remote)\",\n            roles=[\n                Role(\n                    title=\"Software Engineering Intern\",\n                    start_date=\"2022-06\",\n                    end_date=\"2022-08\",\n                    description=\"Developed new features and fixed bugs for the company's flagship mobile application.\",\n                    achievements=[\n                        \"Contributed to codebase with 50+ commits in an Agile environment.\",\n                        \"Successfully fixed 15+ bugs and implemented 5 new features.\",\n                        \"Collaborated with cross-functional teams including product and QA.\"\n                    ]\n                )\n            ]\n        )\n    ],\n    skills=[\n        Skill(category=\"Programming Languages\", name=\"Python, JavaScript, Java, C++\"),\n        Skill(category=\"Web Technologies\", name=\"React, HTML/CSS, Node.js, Express.js\"),\n        Skill(category=\"Databases\", name=\"MySQL, MongoDB, PostgreSQL\"),\n        Skill(category=\"Tools &amp; Platforms\", name=\"Git, Docker, AWS (Basic), VS Code\")\n    ]\n)\n\n# Generate PDF\ntry:\n    pdf_path = generatepdf(\n        cv_data=graduate_data,\n        output_path=\"alex_rodriguez_graduate_cv.pdf\",\n        style=\"classic\",\n        page_size=\"letter\" # Example of using 'letter' page size\n    )\n    print(f\"Graduate CV generated at: {pdf_path}\")\nexcept Exception as e:\n    print(f\"Error generating graduate CV: {e}\")\n</code></pre>"},{"location":"examples/#error-handling","title":"Error Handling","text":"<p>When using <code>generatepdf</code> or <code>yamltocv</code>, it's good practice to include error handling.</p> <pre><code>from generatecv.pdf_generator import generatepdf, yamltocv\nfrom generatecv.models import CV, PersonalInfo # For basic data\nfrom pydantic import ValidationError\nimport yaml # For yaml.YAMLError\n\n# Example data (can be more complex)\nsample_data = CV(\n    personal_info=PersonalInfo(name=\"Test User\", email=\"test@example.com\"),\n    education=[], # Must be provided, even if empty, as it's not optional in CV model\n    experience=[] # Must be provided, even if empty\n)\n\n# --- Test generatepdf ---\ntry:\n    # Intentionally using an invalid style to trigger ValueError\n    generatepdf(cv_data=sample_data, output_path=\"error_test.pdf\", style=\"non_existent_style\")\nexcept ValueError as e:\n    print(f\"Caught expected ValueError from generatepdf: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error from generatepdf: {e}\")\n\n# --- Test yamltocv ---\n# Create a dummy valid YAML file\nvalid_yaml_content = \"\"\"\npersonal_info:\n  name: \"YAML User\"\n  email: \"yaml@example.com\"\neducation: []\nexperience: []\n\"\"\"\nwith open(\"temp_valid.yaml\", \"w\") as f:\n    f.write(valid_yaml_content)\n\n# Create a dummy invalid YAML file (syntax error)\ninvalid_yaml_syntax = \"\"\"\npersonal_info:\n  name: Bad YAML\n  email: bad@yaml: com # Invalid syntax\neducation: []\nexperience: []\n\"\"\"\nwith open(\"temp_invalid_syntax.yaml\", \"w\") as f:\n    f.write(invalid_yaml_syntax)\n\n# Create a dummy YAML with data validation issues\ninvalid_yaml_data = \"\"\"\npersonal_info: # Missing name and email which are required\n  phone: \"12345\"\neducation: []\nexperience: []\n\"\"\"\nwith open(\"temp_invalid_data.yaml\", \"w\") as f:\n    f.write(invalid_yaml_data)\n\n# Test yamltocv with a non-existent file\ntry:\n    yamltocv(yaml_path=\"non_existent_file.yaml\")\nexcept FileNotFoundError as e:\n    print(f\"Caught expected FileNotFoundError from yamltocv: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error from yamltocv (non_existent_file): {e}\")\n\n# Test yamltocv with invalid YAML syntax\ntry:\n    yamltocv(yaml_path=\"temp_invalid_syntax.yaml\")\nexcept yaml.YAMLError as e:\n    print(f\"Caught expected YAMLError from yamltocv: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error from yamltocv (invalid_syntax): {e}\")\n\n# Test yamltocv with data validation error\ntry:\n    yamltocv(yaml_path=\"temp_invalid_data.yaml\")\nexcept ValidationError as e:\n    print(f\"Caught expected ValidationError from yamltocv: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error from yamltocv (invalid_data): {e}\")\n\n# Test yamltocv with valid file (should not raise an error here)\ntry:\n    cv_obj = yamltocv(yaml_path=\"temp_valid.yaml\")\n    print(f\"Successfully loaded CV data for: {cv_obj.personal_info.name}\")\n    # Optionally, generate PDF from this\n    generatepdf(cv_data=cv_obj, output_path=\"cv_from_temp_valid_yaml.pdf\")\n    print(\"PDF generated from temp_valid.yaml\")\nexcept Exception as e:\n    print(f\"Error during valid yamltocv processing: {e}\")\n\n# Clean up temporary files (optional)\nimport os\nos.remove(\"temp_valid.yaml\")\nos.remove(\"temp_invalid_syntax.yaml\")\nos.remove(\"temp_invalid_data.yaml\")\n</code></pre> <p>These examples demonstrate various use cases and features of <code>generatecv</code> focusing on the <code>pdf_generator</code> and <code>models</code>. Adapt them to your specific needs. Remember that the <code>style</code> parameter currently only supports \"classic\", and <code>page_size</code> supports \"A4\" and \"letter\".</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get started with <code>generatecv</code> to create PDF resumes.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<pre><code>pip install generatecv\n</code></pre> <p>Or using <code>uv</code>:</p> <pre><code>uv add generatecv\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":"<p>The core of <code>generatecv</code> involves defining your CV data using Pydantic models and then using the <code>generatepdf</code> function to create a PDF document.</p>"},{"location":"getting-started/#1-define-your-cv-data-in-python","title":"1. Define your CV Data in Python","text":"<p>You'll use models from <code>generatecv.models</code> to structure your information.</p> <pre><code>from generatecv.pdf_generator import generatepdf\nfrom generatecv.models import (\n    CV, PersonalInfo, Education, CompanyExperience, Role, Skill\n)\n\n# Construct your CV data\ncv_data = CV(\n    personal_info=PersonalInfo(\n        name=\"Your Name\",\n        email=\"your.email@example.com\",\n        phone=\"+1 234 567 8900\",\n        location=\"Your City, Country\",\n        summary=\"A brief professional summary about yourself.\",\n        title=\"Your Professional Title (e.g., Software Engineer)\"\n    ),\n    education=[\n        Education(\n            institution=\"University Name\",\n            degree=\"Bachelor of Science in Computer Science\",\n            start_date=\"2018-09\",\n            end_date=\"2022-06\",\n            location=\"City, Country\",\n            gpa=\"3.8/4.0\"\n        )\n    ],\n    experience=[\n        CompanyExperience(\n            company=\"Company Name\",\n            location=\"Company Location\",\n            roles=[\n                Role(\n                    title=\"Software Engineer\",\n                    start_date=\"2022-07\",\n                    end_date=\"Present\", # or a specific end date like \"2023-12\"\n                    description=\"Brief description of your role and responsibilities.\",\n                    achievements=[\n                        \"Key achievement 1\",\n                        \"Key achievement 2\"\n                    ]\n                )\n            ]\n        )\n    ],\n    skills=[\n        Skill(category=\"Programming Languages\", name=\"Python, Java, JavaScript\"),\n        Skill(category=\"Tools\", name=\"Git, Docker, Kubernetes\")\n    ]\n    # You can also add projects, certifications, languages, references, etc.\n)\n\n# Generate the PDF\ntry:\n    output_file = generatepdf(\n        cv_data=cv_data,\n        output_path=\"my_cv.pdf\",\n        style=\"classic\",  # Currently 'classic' is the primary style\n        page_size=\"A4\"    # Options: \"A4\" or \"letter\"\n    )\n    print(f\"CV generated successfully: {output_file}\")\nexcept ValueError as e:\n    print(f\"Error generating PDF: {e}\")\nexcept Exception as e:\n    print(f\"An unexpected error occurred: {e}\")\n</code></pre>"},{"location":"getting-started/#2-using-a-yaml-configuration-file","title":"2. Using a YAML Configuration File","text":"<p>Alternatively, you can define your CV data in a YAML file and use the <code>yamltocv</code> function to load it, then pass the result to <code>generatepdf</code>.</p> <p>a. Create a <code>cv_config.yaml</code> file:</p> <pre><code>personal_info:\n  name: \"Your Name\"\n  email: \"your.email@example.com\"\n  phone: \"+1 234 567 8900\"\n  location: \"Your City, Country\"\n  summary: \"A brief professional summary.\"\n  title: \"Your Professional Title\"\n\neducation:\n  - institution: \"University Name\"\n    degree: \"Bachelor of Science\"\n    start_date: \"2018-09\"\n    end_date: \"2022-06\"\n    location: \"City, Country\"\n    gpa: \"3.8/4.0\"\n\nexperience:\n  - company: \"Company Name\"\n    location: \"Company Location\"\n    roles:\n      - title: \"Software Engineer\"\n        start_date: \"2022-07\"\n        end_date: \"Present\"\n        description: \"Brief description of your role.\"\n        achievements:\n          - \"Achievement A\"\n          - \"Achievement B\"\n\nskills:\n  - category: \"Languages\"\n    name: \"Python, Go, SQL\"\n  - category: \"Databases\"\n    name: \"PostgreSQL, MongoDB\"\n\n# Add other sections like projects, certifications, languages as needed\n# Ensure the structure matches generatecv.models.CV\n</code></pre> <p>b. Python script to process the YAML:</p> <pre><code>from generatecv.pdf_generator import yamltocv, generatepdf\nfrom generatecv.models import CV # For type hinting\nfrom pydantic import ValidationError\nimport yaml # For yaml.YAMLError\n\nyaml_file_path = \"cv_config.yaml\"\noutput_pdf_path = \"my_cv_from_yaml.pdf\"\n\ntry:\n    # Load data from YAML and validate it\n    # Note: yamltocv has output_path, style, page_size params that are not used by it.\n    cv_data_from_yaml: CV = yamltocv(yaml_path=yaml_file_path)\n\n    # Generate PDF from the loaded data\n    generated_file = generatepdf(\n        cv_data=cv_data_from_yaml,\n        output_path=output_pdf_path,\n        style=\"classic\",\n        page_size=\"A4\"\n    )\n    print(f\"CV from YAML generated successfully: {generated_file}\")\n\nexcept FileNotFoundError:\n    print(f\"Error: YAML file not found at {yaml_file_path}\")\nexcept yaml.YAMLError as e:\n    print(f\"Error parsing YAML file: {e}\")\nexcept ValidationError as e:\n    print(f\"Data validation error from YAML content: {e}\")\nexcept ValueError as e: # For generatepdf errors like invalid style\n    print(f\"Error generating PDF: {e}\")\nexcept Exception as e:\n    print(f\"An unexpected error occurred: {e}\")\n</code></pre>"},{"location":"getting-started/#styles","title":"Styles","text":"<p><code>generatecv</code> uses a style system to define the appearance of the PDF. - <code>classic</code>: This is the default and currently the main implemented style. It provides a traditional CV layout.</p> <p>You specify the style via the <code>style</code> parameter in the <code>generatepdf</code> function: <pre><code>generatepdf(cv_data=your_data, output_path=\"my_cv.pdf\", style=\"classic\")\n</code></pre></p>"},{"location":"getting-started/#page-size","title":"Page Size","text":"<p>You can set the page size for your PDF: - <code>A4</code> (default) - <code>letter</code></p> <p>Specify this using the <code>page_size</code> parameter in <code>generatepdf</code>: <pre><code>generatepdf(cv_data=your_data, output_path=\"my_cv.pdf\", page_size=\"letter\")\n</code></pre></p>"},{"location":"getting-started/#output-format","title":"Output Format","text":"<p>The <code>generatepdf</code> function is specifically designed to output PDF files. Other formats like HTML or DOCX are not supported by this function.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the API Reference for detailed documentation on models and functions.</li> <li>See Examples for more use cases.</li> <li>Learn about Contributing to the project if you're interested in extending its capabilities.</li> </ul>"},{"location":"api/","title":"API Reference","text":"<p>Dokumentasi API ini dibuat secara otomatis untuk paket <code>generatecv</code>.</p>"},{"location":"api/#fungsi-inti","title":"Fungsi Inti","text":"<p>Fungsi utama untuk menghasilkan CV dan memuat data.</p>"},{"location":"api/#generatepdf","title":"<code>generatepdf()</code>","text":"<p>Generate a PDF CV from the provided data.</p> <p>Parameters:</p> Name Type Description Default <code>cv_data</code> <code>CV</code> <p>CV model containing the CV data</p> required <code>output_path</code> <code>str</code> <p>Path where the PDF will be saved</p> required <code>style</code> <code>str</code> <p>Style name for the CV (e.g., 'classic', 'modern', 'minimal')</p> <code>'classic'</code> <code>page_size</code> <code>str</code> <p>Size of the page ('A4' or 'letter')</p> <code>'A4'</code> <p>Returns:</p> Type Description <code>str</code> <p>Path to the generated PDF file</p> Source code in <code>src/generatecv/pdf_generator.py</code> <pre><code>def generatepdf(\n    cv_data: CV, output_path: str, style: str = \"classic\", page_size: str = \"A4\"\n) -&gt; str:\n    \"\"\"Generate a PDF CV from the provided data.\n\n    Args:\n        cv_data: CV model containing the CV data\n        output_path: Path where the PDF will be saved\n        style: Style name for the CV (e.g., 'classic', 'modern', 'minimal')\n        page_size: Size of the page ('A4' or 'letter')\n\n    Returns:\n        Path to the generated PDF file\n    \"\"\"\n    generator = _PDFGenerator(output_path, cv_data, style, page_size)\n    return str(generator.generate())\n</code></pre>"},{"location":"api/#yamltocv","title":"<code>yamltocv()</code>","text":"<p>Convert YAML file to CV object.</p> <p>Parameters:</p> Name Type Description Default <code>output_path</code> <code>str</code> <p>Path where the PDF will be saved. If None, a default path is generated.</p> required <code>style</code> <code>str</code> <p>Style name for the CV (e.g., 'classic', 'modern', 'minimal')</p> <code>'classic'</code> <code>page_size</code> <code>str</code> <p>Size of the page ('A4' or 'letter')</p> <code>'A4'</code> <code>yaml_path</code> <code>str</code> <p>Path to the YAML file containing the CV data</p> required <p>Returns:</p> Type Description <code>CV</code> <p>CV object created from the YAML data</p> Source code in <code>src/generatecv/pdf_generator.py</code> <pre><code>def yamltocv(\n    output_path: str, yaml_path: str, style: str = \"classic\", page_size: str = \"A4\"\n) -&gt; CV:\n    \"\"\"Convert YAML file to CV object.\n\n    Args:\n        output_path: Path where the PDF will be saved.\n            If None, a default path is generated.\n        style: Style name for the CV (e.g., 'classic', 'modern', 'minimal')\n        page_size: Size of the page ('A4' or 'letter')\n        yaml_path: Path to the YAML file containing the CV data\n\n    Returns:\n        CV object created from the YAML data\n    \"\"\"  # Add AI summary generation logic here\n\n    yaml_data = parse_yaml_file(yaml_path)\n    cv_data = validate_cv_data(yaml_data)\n\n    return cv_data\n</code></pre>"},{"location":"api/#struktur-data-utama-generatecvmodelscv","title":"Struktur Data Utama (<code>generatecv.models.CV</code>)","text":"<p>Model Pydantic utama yang menampung semua data CV. </p> <p>               Bases: <code>BaseModel</code></p> <p>Main CV model that contains all sections.</p> Source code in <code>src/generatecv/models.py</code> <pre><code>class CV(BaseModel):\n    \"\"\"Main CV model that contains all sections.\"\"\"\n\n    personal_info: PersonalInfo = Field(\n        description=\"Personal information of the individual.\"\n    )\n    education: list[Education] = Field(\n        description=\"List of educational qualifications.\"\n    )\n    experience: list[CompanyExperience] = Field(\n        description=\"List of professional experiences, grouped by company.\"\n    )  # Updated here\n    skills: list[Skill] | None = Field(\n        default=None, description=\"List of skills categorized by area.\"\n    )\n    projects: list[Project] | None = Field(\n        default=None, description=\"List of personal or professional projects.\"\n    )\n    certifications: list[Certificate] | None = Field(\n        default=None, description=\"List of certifications obtained.\"\n    )\n    languages: list[Language] | None = Field(\n        default=None, description=\"List of languages spoken and their proficiency.\"\n    )\n    references: list[Reference] | None = Field(\n        default=None, description=\"List of professional references.\"\n    )\n    publications: list[str] | None = Field(\n        default=None, description=\"List of publications, if any.\"\n    )\n    awards: list[str] | None = Field(\n        default=None, description=\"List of awards and honors received.\"\n    )\n    interests: list[str] | None = Field(\n        default=None, description=\"List of personal interests or hobbies.\"\n    )\n    custom_sections: dict[str, str | list[str]] | None = Field(\n        default=None,\n        description=\"Allows for adding custom sections to the CV as key-value pairs, \"\n        \"where value can be a string or list of strings.\",\n    )\n</code></pre>"},{"location":"api/#personalinfo","title":"<code>PersonalInfo</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for personal information section.</p> Source code in <code>src/generatecv/models.py</code> <pre><code>class PersonalInfo(BaseModel):\n    \"\"\"Model for personal information section.\"\"\"\n\n    name: str = Field(description=\"Full name of the individual.\")\n    email: EmailStr = Field(description=\"Primary email address.\")\n    phone: str | None = Field(\n        default=None, description=\"Contact phone number (e.g., +1-555-123-4567).\"\n    )\n    location: str | None = Field(\n        default=None,\n        description=\"Current city and country of residence (e.g., San Francisco, CA).\",\n    )\n    website: HttpUrl | None = Field(\n        default=None, description=\"Personal website or portfolio URL.\"\n    )\n    linkedin: HttpUrl | None = Field(default=None, description=\"LinkedIn profile URL.\")\n    github: HttpUrl | None = Field(default=None, description=\"GitHub profile URL.\")\n    summary: str | None = Field(\n        default=None, description=\"A brief professional summary or objective statement.\"\n    )\n    title: str | None = Field(\n        default=None,\n        description=\"Current job title or professional headline \"\n        \"(e.g., Senior Software Engineer).\",\n    )\n</code></pre>"},{"location":"api/#education","title":"<code>Education</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for education entries.</p> Source code in <code>src/generatecv/models.py</code> <pre><code>class Education(BaseModel):\n    \"\"\"Model for education entries.\"\"\"\n\n    institution: str = Field(description=\"Name of the educational institution.\")\n    degree: str = Field(\n        description=\"Degree obtained (e.g., Bachelor of Science in Computer Science).\"\n    )\n    start_date: str = Field(\n        description=\"Start date of education (e.g., YYYY-MM or Sep 2018).\"\n    )\n    end_date: str | None = Field(\n        default=None,\n        description=\"End date of education (e.g., YYYY-MM, Jun 2022, or 'Present').\",\n    )\n    location: str | None = Field(\n        default=None, description=\"Location of the institution (e.g., Stanford, CA).\"\n    )\n    details: str | None = Field(\n        default=None, description=\"Additional details, such as thesis title or honors.\"\n    )\n    gpa: str | None = Field(\n        default=None, description=\"Grade Point Average (e.g., 3.8/4.0).\"\n    )\n</code></pre>"},{"location":"api/#companyexperience","title":"<code>CompanyExperience</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for professional experience at a single company with multiple roles.</p> <p>This model allows grouping multiple role entries under a single company.</p> Source code in <code>src/generatecv/models.py</code> <pre><code>class CompanyExperience(BaseModel):\n    \"\"\"Model for professional experience at a single company with multiple roles.\n\n    This model allows grouping multiple role entries under a single company.\n    \"\"\"\n\n    company: str = Field(description=\"Name of the company or organization.\")\n    location: str | None = Field(\n        default=None, description=\"Main location of the company (e.g., New York, NY).\"\n    )  # Company-level location\n    roles: list[Role] = Field(description=\"List of roles held at this company.\")\n</code></pre>"},{"location":"api/#role","title":"<code>Role</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for a specific role within a company.</p> Source code in <code>src/generatecv/models.py</code> <pre><code>class Role(BaseModel):\n    \"\"\"Model for a specific role within a company.\"\"\"\n\n    title: str = Field(description=\"Job title or position held.\")\n    start_date: str = Field(\n        description=\"Start date of this role (e.g., YYYY-MM or Jun 2020).\"\n    )\n    end_date: str | None = Field(\n        default=None,\n        description=\"End date of this role (e.g., YYYY-MM, Aug 2022, or 'Present').\",\n    )\n    location: str | None = Field(\n        default=None,\n        description=\"Location where this role was performed \"\n        \"(if different from company's main location).\",\n    )\n    description: str | None = Field(\n        default=None, description=\"A brief overview of responsibilities and the role.\"\n    )\n    achievements: list[str] | None = Field(\n        default=None,\n        description=\"List of key achievements or accomplishments for this role.\",\n    )\n</code></pre>"},{"location":"api/#skill","title":"<code>Skill</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for skills section.</p> Source code in <code>src/generatecv/models.py</code> <pre><code>class Skill(BaseModel):\n    \"\"\"Model for skills section.\"\"\"\n\n    category: str = Field(\n        description=\"Category of the skill (e.g., Languages, Tools, Frameworks).\"\n    )\n    name: str = Field(description=\"Name of the skill (e.g., Python, Docker, React).\")\n</code></pre>"},{"location":"api/#project","title":"<code>Project</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for projects section.</p> Source code in <code>src/generatecv/models.py</code> <pre><code>class Project(BaseModel):\n    \"\"\"Model for projects section.\"\"\"\n\n    name: str = Field(description=\"Name of the project.\")\n    description: str | None = Field(\n        default=None, description=\"A brief description of the project.\"\n    )\n    technologies: list[str] | None = Field(\n        default=None, description=\"List of technologies used in the project.\"\n    )\n    link: HttpUrl | None = Field(\n        default=None,\n        description=\"URL to the project (e.g., GitHub repository or live demo).\",\n    )\n    start_date: str | None = Field(\n        default=None,\n        description=\"Start date of the project (e.g., YYYY-MM or Jan 2021).\",\n    )\n    end_date: str | None = Field(\n        default=None,\n        description=\"End date of the project (e.g., YYYY-MM, Mar 2021, or 'Ongoing').\",\n    )\n    achievements: list[str] | None = Field(\n        default=None, description=\"List of key achievements or outcomes of the project.\"\n    )\n</code></pre>"},{"location":"api/#certificate","title":"<code>Certificate</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for certifications section.</p> Source code in <code>src/generatecv/models.py</code> <pre><code>class Certificate(BaseModel):\n    \"\"\"Model for certifications section.\"\"\"\n\n    name: str = Field(description=\"Name of the certificate.\")\n    issuer: str = Field(description=\"Issuing organization or authority.\")\n    date: str | None = Field(\n        default=None, description=\"Date of certification (e.g., YYYY-MM or Oct 2020).\"\n    )\n    description: str | None = Field(\n        default=None, description=\"A brief description of the certification.\"\n    )\n    link: HttpUrl | None = Field(\n        default=None, description=\"URL to the certificate or verification page.\"\n    )\n</code></pre>"},{"location":"api/#language","title":"<code>Language</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for language proficiency.</p> Source code in <code>src/generatecv/models.py</code> <pre><code>class Language(BaseModel):\n    \"\"\"Model for language proficiency.\"\"\"\n\n    name: str = Field(description=\"Name of the language (e.g., English, Spanish).\")\n    proficiency: str = Field(\n        description=\"Proficiency level (e.g., Native, Fluent, Conversational).\"\n    )\n</code></pre>"},{"location":"api/#reference","title":"<code>Reference</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for professional references.</p> Source code in <code>src/generatecv/models.py</code> <pre><code>class Reference(BaseModel):\n    \"\"\"Model for professional references.\"\"\"\n\n    name: str = Field(description=\"Name of the reference.\")\n    position: str = Field(description=\"Position or title of the reference.\")\n    company: str = Field(description=\"Company or organization of the reference.\")\n    contact: str | None = Field(\n        default=None,\n        description=\"Contact information (e.g., email or phone). \"\n        \"'Available upon request' is also valid.\",\n    )\n    relation: str | None = Field(\n        default=None,\n        description=\"Relationship to the individual (e.g., Former Manager, Colleague).\",\n    )\n</code></pre>"},{"location":"api/#modul-lainnya","title":"Modul Lainnya","text":""},{"location":"api/#styles","title":"Styles","text":"<p>Modul <code>generatecv.styles</code> menangani penampilan visual dari PDF yang dihasilkan.</p>"},{"location":"api/#cvstyle","title":"<code>CVStyle</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for CV styling.</p> Source code in <code>src/generatecv/styles/base_style.py</code> <pre><code>class CVStyle(ABC):\n    \"\"\"Base class for CV styling.\"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize the style.\"\"\"\n        self.styles = getSampleStyleSheet()\n        self._setup_styles()\n\n    @abstractmethod\n    def _setup_styles(self) -&gt; None:\n        \"\"\"Setup the styles. Should be implemented by subclasses.\"\"\"\n        pass\n\n    def get_styles(self) -&gt; StyleSheet1:\n        \"\"\"Get the styles dictionary.\"\"\"\n        return self.styles\n</code></pre>"},{"location":"api/#generatecv.styles.base_style.CVStyle.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the style.</p> Source code in <code>src/generatecv/styles/base_style.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the style.\"\"\"\n    self.styles = getSampleStyleSheet()\n    self._setup_styles()\n</code></pre>"},{"location":"api/#generatecv.styles.base_style.CVStyle.get_styles","title":"<code>get_styles()</code>","text":"<p>Get the styles dictionary.</p> Source code in <code>src/generatecv/styles/base_style.py</code> <pre><code>def get_styles(self) -&gt; StyleSheet1:\n    \"\"\"Get the styles dictionary.\"\"\"\n    return self.styles\n</code></pre>"},{"location":"api/#classicstyle","title":"<code>ClassicStyle</code>","text":"<p>               Bases: <code>CVStyle</code></p> <p>Classic style for CVs.</p> Source code in <code>src/generatecv/styles/classic_style.py</code> <pre><code>class ClassicStyle(CVStyle):\n    \"\"\"Classic style for CVs.\"\"\"\n\n    def _setup_styles(self) -&gt; None:\n        \"\"\"Setup classic style.\"\"\"\n        # Name style\n        self.styles.add(\n            ParagraphStyle(\n                name=\"Name\",\n                parent=self.styles[\"Heading1\"],\n                fontSize=16,  # Increased font size\n                spaceAfter=4,  # Adjusted spacing\n                leading=22,  # Added leading\n            )\n        )\n\n        # Section headings\n        self.styles.add(\n            ParagraphStyle(\n                name=\"SectionHeading\",\n                parent=self.styles[\"Heading2\"],\n                fontSize=12,  # Increased font size\n                spaceAfter=4,  # Adjusted spacing\n                fontName=\"Times-Bold\",\n                leading=18,  # Added leading\n            )\n        )\n\n        # Contact info style\n        self.styles.add(\n            ParagraphStyle(\n                name=\"ContactInfo\",\n                parent=self.styles[\"Normal\"],\n                fontSize=10,\n                spaceAfter=4,  # Adjusted spacing\n                leading=12,  # Added leading\n            )\n        )\n\n        # Experience title style\n        self.styles.add(\n            ParagraphStyle(\n                name=\"ExperienceTitle\",\n                parent=self.styles[\"Normal\"],\n                fontSize=10,\n                fontName=\"Times-Bold\",\n                spaceAfter=2,  # Adjusted spacing\n                leading=14,  # Added leading\n            )\n        )\n\n        # Role Title style (new)\n        self.styles.add(\n            ParagraphStyle(\n                name=\"RoleTitle\",\n                parent=self.styles[\"Normal\"],\n                fontSize=12,\n                fontName=\"Times-Bold\",\n                leftIndent=0,  # Removed indent\n                spaceBefore=3,  # Adjusted spacing\n                spaceAfter=2,  # Adjusted spacing\n                leading=12,  # Added leading\n            )\n        )\n\n        # Experience details style\n        self.styles.add(\n            ParagraphStyle(\n                name=\"ExperienceDetails\",\n                parent=self.styles[\"Normal\"],\n                fontSize=10,\n                fontName=\"Times-Italic\",\n                leftIndent=0,  # Ensure no indent\n                spaceAfter=2,  # Adjusted spacing\n                leading=12,  # Added leading\n            )\n        )\n\n        # Normal text style\n        normal_style = self.styles[\"Normal\"]\n        normal_style.fontSize = 10\n        normal_style.spaceAfter = 6\n        normal_style.fontName = \"Times-Roman\"\n        normal_style.leading = 12  # Added leading\n\n        # Paragraph style (similar to Normal)\n        self.styles.add(\n            ParagraphStyle(\n                name=\"Paragraph\",\n                parent=self.styles[\"Normal\"],\n                fontSize=10,\n                spaceAfter=4,\n                fontName=\"Times-Roman\",\n                leading=12,\n                firstLineIndent=15,\n            )\n        )\n</code></pre>"}]}