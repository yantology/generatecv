name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Install dependencies
      run: |
        uv sync --dev
        # Make sure dependencies are actually installed
        uv run python -c "import email_validator; print('Email validator found')"
    
    - name: Lint with Ruff
      run: |
        uv run ruff check .
    
    - name: Check formatting with Black
      run: |
        uv run black --check .
    
    - name: Type check with pyrefly
      run: |
        uv run pyrefly check
    
    - name: Test with pytest and coverage
      run: |
        uv run pytest --cov=generatecv --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  auto-tag:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for version comparison
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Extract version from pyproject.toml
      id: get_version
      run: |
        # Extract version using Python
        VERSION=$(python -c "import tomllib; f=open('pyproject.toml', 'rb'); data=tomllib.load(f); print(data['project']['version'])")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
    
    - name: Get latest tag
      id: get_latest_tag
      run: |
        # Get the latest tag, or set to 0.0.0 if no tags exist
        set +e  # Don't exit on error
        LATEST_TAG=$(git tag -l --sort=-version:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+' | head -n1)
        set -e  # Re-enable exit on error
        
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="0.0.0"
          echo "No existing tags found, using default: $LATEST_TAG"
        else
          echo "Found latest tag: $LATEST_TAG"
        fi
        
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
    
    - name: Compare versions
      id: compare_versions
      run: |
        CURRENT_VERSION=${{ steps.get_version.outputs.version }}
        LATEST_TAG=${{ steps.get_latest_tag.outputs.latest_tag }}
        
        echo "Debug: CURRENT_VERSION='$CURRENT_VERSION'"
        echo "Debug: LATEST_TAG='$LATEST_TAG'"
        
        # Function to compare semantic versions
        python << EOF
        def version_tuple(v):
            # Handle empty string or None
            if not v or v.strip() == "":
                return (0, 0, 0)
            
            # Remove 'v' prefix if present
            v = v.lstrip('v')
            
            # Split and convert to integers, pad with zeros if needed
            parts = v.split(".")
            while len(parts) < 3:
                parts.append("0")
            
            try:
                return tuple(int(part) for part in parts[:3])
            except ValueError:
                # If conversion fails, treat as 0.0.0
                return (0, 0, 0)
        
        current = version_tuple("$CURRENT_VERSION")
        latest = version_tuple("$LATEST_TAG")
        
        print(f"Current version tuple: {current}")
        print(f"Latest version tuple: {latest}")
        
        if current > latest:
            print("Version is newer")
            exit(0)
        elif current == latest:
            print("Version is the same")
            exit(1)
        else:
            print("Version is older")
            exit(2)
        EOF
        
        if [ $? -eq 0 ]; then
          echo "should_tag=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Version $CURRENT_VERSION is newer than $LATEST_TAG"
        elif [ $? -eq 1 ]; then
          echo "should_tag=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è  Version $CURRENT_VERSION is the same as $LATEST_TAG - skipping tag creation"
        else
          echo "should_tag=false" >> $GITHUB_OUTPUT
          echo "‚ùå Version $CURRENT_VERSION is older than $LATEST_TAG - skipping tag creation"
        fi
    
    - name: Create and push tag
      if: steps.compare_versions.outputs.should_tag == 'true'
      run: |
        VERSION=${{ steps.get_version.outputs.version }}
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin "v$VERSION"
        echo "üè∑Ô∏è  Created and pushed tag v$VERSION"

